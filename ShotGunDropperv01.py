import sys, re
import nuke

if sys.platform == "linux2":
    sys.path.append('/dsGlobal/globalResources/Shotgun')

else:
    sys.path.append('//vfx-data-server/dsGlobal/globalResources/Shotgun')
from shotgun_api3 import Shotgun


# This is simple example for how to use Nuke's dropdata callback to communicate with Shotgun.
# and bring Shotgun Versions into Nuke simply by dragging them out of the browser and into Nuke.
#
# Customise the shotgun query and subsequent Nuke command in the dropSGVersion function to
# make this work with your particular Shotgun setup and/or to extend the functionality of this script.

def getVersions ( connection, link, ignore=None ):
    '''
    Return all versions that are linked to a shotgun entity (eg shot or asset etc).
    args:
        link	-	shotgun entity to search for versions (i.e. {'type':'Shot', 'id':1226} )
        ignore  -   list of status' to ignore (eg ['omt', 'clsd', 'hold']). If None, all versions are returned regardless of their status.
    '''
    columns = [ 'code', 'sg_status_list', 'sg_version_type', 'sg_path_to_frames', 'sg_first_frame', 'sg_last_frame' ]
    filters = [ ['entity', 'is', link] ]
    versions = connection.find( 'Version', filters, columns )
    if not ignore:
        return versions
    return [ v for v in versions if v['sg_status_list'] not in ignore ]

def getPlaylistVersionsByID ( connection, playlist ):
        '''
        return a playlist's content
        args:
            playlist  -  requested playlist id
        '''
        columns = [ 'sg_path_to_frames', 'sg_path_to_movie', 'sg_first_frame', 'sg_last_frame' ]
        print playlist
        filters = [ ['playlists', 'is', {'type':'Playlist', 'id':int(playlist)} ] ]
        result = connection.find('Version', filters, columns)
        return result

def dropSG( mimeType, text ):
    '''
    Parse the received url for the ID, connect to shotgun and retrieve info for the particular ID.
    args:
       text  -  url of a shotgun version
    '''
    # DO SOME MORE CHECKING IF WE CARE ABOUT THIS PARTICULAR URL.
    # THIS PARTICULAR SCRIPT ONLY CARES ABOUT VERSIONS

    if not mimeType == 'text/plain' or not (text.startswith( 'http' ) and 'shotgunstudio' in text):
        return False
        
    def idCheck( url, sgType ):
        foundID = re.match( '.+%s/(\d+)' % sgType, url )
        foundIDinEmail = re.match( '.+entity_id=(\d+).+entity_type=%s' % sgType, url )
        foundIDinURL = re.match( r'.+#%s_(\d+)_' % sgType, url )
        if not foundID and not foundIDinEmail and not foundIDinURL:
            return
        try:
            if foundID:
                return int( foundID.group(1) )
            elif foundIDinEmail:
                return int( foundIDinEmail.group(1) )
            elif foundIDinURL:
                return int( foundIDinURL.group(1) )
        except ValueError:
            return

    SERVER_PATH = 'https://duckling.shotgunstudio.com' #  use your shotgun server name (i.e. "https://studioName.shotgunstudio.com")
    SCRIPT_NAME = 'assetOpenToShotgun' #  use the name of the shotgun api script that will do the query (needs to be set up in Shotgun's admin area)
    SCRIPT_KEY = 'e932e9c2864c9bcdc3f3ddf8b801cc3d565bf51f' #   use the script key as generated by Shotgun when the above script was created in Shotgun's admin area        
    
    #-------------------------------- VERSION
    if 'Version' in text:
        sgID = idCheck( text, 'Version' )
        print 'retrieving shotgun version %s' % sgID
        #DO THE SHOTGUN THING
        CONNECT = Shotgun( SERVER_PATH, SCRIPT_NAME, SCRIPT_KEY )
        # QUERY SHOTGUN FOR THE FOUND ID
        columns = ['sg_path_to_frames', 'sg_first_frame', 'sg_last_frame']
        filters = [ [ 'id', 'is', sgID] ]
        v = CONNECT.find_one( 'Version', filters, columns )
        
        #DO THE NUKE THING
        nuke.createNode( 'Read', 'file %(sg_path_to_frames)s first %(sg_first_frame)s last %(sg_last_frame)s origfirst %(sg_first_frame)s origlast %(sg_last_frame)s' % v )
        return True
    #-------------------------------- PLAYLIST
    elif 'Playlist' in text:
        sgID = idCheck( text, 'Playlist' )
        print 'retrieving shotgun playlist %s' % sgID
        #DO THE SHOTGUN THING
        CONNECT = Shotgun( SERVER_PATH, SCRIPT_NAME, SCRIPT_KEY )
        versions = getPlaylistVersionsByID( CONNECT, sgID )

        #DO THE NUKE THING
        for v in versions:
            nuke.createNode( 'Read', 'file %(sg_path_to_frames)s first %(sg_first_frame)s last %(sg_last_frame)s origfirst %(sg_first_frame)s origlast %(sg_last_frame)s' % v )
        return True        
    #-------------------------------- SHOT
    elif 'Shot' in text:
        sgID = idCheck( text, 'Shot' )        
        print 'retrieving shotgun shot %s' % sgID
        #DO THE SHOTGUN THING
        CONNECT = Shotgun( SERVER_PATH, SCRIPT_NAME, SCRIPT_KEY )
        versions = getVersions( CONNECT, {'type':'Shot', 'id':int(sgID)}, ignore=['omt'] )
        # GET SHOT DESCRIPTION
        columns = ['description']
        filters = [ [ 'id', 'is', sgID] ]
        shot = CONNECT.find_one( 'Shot', filters, columns )
        desc = shot['description']
        #DO THE NUKE THING
        for v in versions:
            nuke.createNode( 'Read', 'file %(sg_path_to_frames)s first %(sg_first_frame)s last %(sg_last_frame)s origfirst %(sg_first_frame)s origlast %(sg_last_frame)s label %(sg_version_type)s' % v )
        

        if desc:
            nuke.createNode( 'StickyNote', 'label "%s"' % desc )

        return True
    
    else:
        return False